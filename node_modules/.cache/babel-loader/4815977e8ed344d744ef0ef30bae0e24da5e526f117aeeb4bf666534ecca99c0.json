{"ast":null,"code":"var _jsxFileName = \"/Users/hye/Documents/journal-whisper/src/Journal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Calendar from \"react-calendar\";\nimport 'react-calendar/dist/Calendar.css';\nimport logo from \"./assets/logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PROXY_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:8090/transcribeAudio\" : \"https://journal-whisper.onrender.com/transcribeAudio\";\nconst formatDateLocal = date => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\nexport default function Journal({\n  user,\n  onLogout\n}) {\n  _s();\n  var _localEntries$formatD;\n  const [entry, setEntry] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [saveMessage, setSaveMessage] = useState(\"\");\n  const [currentTimestamp, setCurrentTimestamp] = useState({\n    date: \"\",\n    time: \"\"\n  });\n  const [countdown, setCountdown] = useState(0);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [entriesForDate, setEntriesForDate] = useState([]);\n  const [localEntries, setLocalEntries] = useState({});\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownIntervalRef = useRef(null);\n  const generateTimestamp = () => {\n    const now = new Date();\n    return {\n      date: formatDateLocal(now),\n      time: now.toLocaleTimeString()\n    };\n  };\n  useEffect(() => {\n    setCurrentTimestamp(generateTimestamp());\n  }, []);\n  const fetchEntriesForDate = async dateToFetch => {\n    const FETCH_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:8090/getEntries\" : \"https://journal-whisper.onrender.com/getEntries\";\n    try {\n      const response = await fetch(FETCH_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user,\n          date: formatDateLocal(dateToFetch)\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch entries\");\n      const data = await response.json();\n      setEntriesForDate(data.entries || []);\n    } catch (err) {\n      setEntriesForDate([]);\n    }\n  };\n  useEffect(() => {\n    fetchEntriesForDate(selectedDate);\n  }, [selectedDate, user]);\n  const startRecording = async durationSeconds => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      setSaveMessage(\"Audio recording not supported in this browser.\");\n      setShowToast(true);\n      return;\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      setRecordingDuration(durationSeconds);\n      setCurrentTimestamp(generateTimestamp());\n      setCountdown(durationSeconds);\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstart = () => {\n        setIsRecording(true);\n        setShowToast(true);\n        setSaveMessage(\"Recording in progress...\");\n        countdownIntervalRef.current = setInterval(() => {\n          setCountdown(prev => {\n            if (prev <= 1) {\n              stopRecording();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      };\n      mediaRecorder.onstop = async () => {\n        clearInterval(countdownIntervalRef.current);\n        setCountdown(0);\n        setIsRecording(false);\n        setRecordingDuration(0);\n        setSaveMessage(\"\");\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: \"audio/webm\"\n        });\n        try {\n          const formData = new FormData();\n          formData.append(\"file\", audioBlob, \"recording.webm\");\n          formData.append(\"user\", user);\n          const response = await fetch(PROXY_API_URL, {\n            method: \"POST\",\n            body: formData\n          });\n          if (!response.ok) throw new Error(`Transcription failed: ${response.statusText}`);\n          const data = await response.json();\n          if (data.transcription) {\n            setEntry(data.transcription);\n            setSaveMessage(\"Transcription received. Please review and save manually.\");\n            setShowToast(true);\n          } else {\n            setSaveMessage(\"No transcription received.\");\n            setShowToast(true);\n          }\n        } catch (error) {\n          setSaveMessage(\"Error during transcription: \" + error.message);\n          setShowToast(true);\n        }\n      };\n      mediaRecorder.start();\n    } catch (err) {\n      setSaveMessage(\"Could not start recording: \" + err.message);\n      setShowToast(true);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      mediaRecorderRef.current.stop();\n    }\n    clearInterval(countdownIntervalRef.current);\n    setIsRecording(false);\n  };\n  const saveToGoogleSheet = async (date, time, text, username) => {\n    const SAVE_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:8090/saveEntry\" : \"https://journal-whisper.onrender.com/saveEntry\";\n    try {\n      const response = await fetch(SAVE_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          date,\n          time,\n          entry: text,\n          user: username\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to save entry to Google Sheets\");\n      return await response.json();\n    } catch (error) {\n      setSaveMessage(\"Error saving to Google Sheets: \" + error.message);\n      setShowToast(true);\n      return null;\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!entry.trim()) {\n      setSaveMessage(\"Please enter something before saving.\");\n      setShowToast(true);\n      return;\n    }\n    const result = await saveToGoogleSheet(currentTimestamp.date, currentTimestamp.time, entry, user);\n    if (result) {\n      setSaveMessage(\"Journal entry saved!\");\n      setShowToast(true);\n      setEntry(\"\");\n      setCurrentTimestamp(generateTimestamp());\n      const savedDate = new Date(currentTimestamp.date + \"T00:00:00\");\n      setSelectedDate(savedDate);\n      fetchEntriesForDate(savedDate);\n      setLocalEntries(prev => {\n        const dateKey = formatDateLocal(savedDate);\n        const existing = prev[dateKey] || [];\n        return {\n          ...prev,\n          [dateKey]: [entry, ...existing]\n        };\n      });\n    } else {\n      setSaveMessage(\"Failed to save entry. Please try again.\");\n      setShowToast(true);\n    }\n  };\n  const handleRefreshTime = () => {\n    setCurrentTimestamp(generateTimestamp());\n    setSaveMessage(\"\");\n  };\n  useEffect(() => {\n    return () => {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n        mediaRecorderRef.current.stop();\n      }\n      clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    if (saveMessage) {\n      const timer = setTimeout(() => setSaveMessage(\"\"), 6000);\n      return () => clearTimeout(timer);\n    }\n  }, [saveMessage]);\n  const getButtonProgress = () => {\n    if (recordingDuration === 0) return \"0%\";\n    const percent = (recordingDuration - countdown) / recordingDuration * 100;\n    return `${percent}%`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: \"100vh\",\n      backgroundColor: \"#FFF8E7\",\n      padding: \"2rem\",\n      fontFamily: \"sans-serif\",\n      maxWidth: 700,\n      margin: \"auto\",\n      color: \"#222\"\n    },\n    children: [showToast && saveMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"40px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        backgroundColor: \"#333\",\n        color: \"white\",\n        padding: \"10px 20px\",\n        borderRadius: \"20px\",\n        boxShadow: \"0 2px 10px rgba(0,0,0,0.7)\",\n        zIndex: 9999,\n        fontSize: \"1rem\",\n        opacity: 0.9,\n        userSelect: \"none\"\n      },\n      \"aria-live\": \"polite\",\n      children: saveMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this), ((_localEntries$formatD = localEntries[formatDateLocal(selectedDate)]) === null || _localEntries$formatD === void 0 ? void 0 : _localEntries$formatD.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"1rem\",\n        padding: \"1rem\",\n        backgroundColor: \"#e0ffe0\",\n        borderRadius: \"8px\",\n        border: \"1px solid #27ae60\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Journal entry saved!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          paddingLeft: \"1.2rem\"\n        },\n        children: localEntries[formatDateLocal(selectedDate)].map((text, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            marginBottom: \"0.5rem\",\n            whiteSpace: \"pre-wrap\"\n          },\n          children: text\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_s(Journal, \"kfL5T0/otlB/A/VH8gTAyMJBk/g=\");\n_c = Journal;\nvar _c;\n$RefreshReg$(_c, \"Journal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Calendar","logo","jsxDEV","_jsxDEV","PROXY_API_URL","window","location","hostname","formatDateLocal","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","Journal","user","onLogout","_s","_localEntries$formatD","entry","setEntry","isRecording","setIsRecording","showToast","setShowToast","saveMessage","setSaveMessage","currentTimestamp","setCurrentTimestamp","time","countdown","setCountdown","recordingDuration","setRecordingDuration","selectedDate","setSelectedDate","Date","entriesForDate","setEntriesForDate","localEntries","setLocalEntries","mediaRecorderRef","audioChunksRef","countdownIntervalRef","generateTimestamp","now","toLocaleTimeString","fetchEntriesForDate","dateToFetch","FETCH_API_URL","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","entries","err","startRecording","durationSeconds","navigator","mediaDevices","getUserMedia","stream","audio","mediaRecorder","MediaRecorder","current","ondataavailable","event","size","push","onstart","setInterval","prev","stopRecording","onstop","clearInterval","audioBlob","Blob","type","formData","FormData","append","statusText","transcription","error","message","start","state","stop","saveToGoogleSheet","text","username","SAVE_API_URL","handleSubmit","e","preventDefault","trim","result","savedDate","dateKey","existing","handleRefreshTime","timer","setTimeout","clearTimeout","getButtonProgress","percent","style","minHeight","backgroundColor","padding","fontFamily","maxWidth","margin","color","children","position","top","left","transform","borderRadius","boxShadow","zIndex","fontSize","opacity","userSelect","fileName","_jsxFileName","lineNumber","columnNumber","length","marginTop","border","paddingLeft","map","idx","marginBottom","whiteSpace","_c","$RefreshReg$"],"sources":["/Users/hye/Documents/journal-whisper/src/Journal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Calendar from \"react-calendar\";\nimport 'react-calendar/dist/Calendar.css';\nimport logo from \"./assets/logo.png\";\n\nconst PROXY_API_URL =\n  window.location.hostname === \"localhost\"\n    ? \"http://localhost:8090/transcribeAudio\"\n    : \"https://journal-whisper.onrender.com/transcribeAudio\";\n\nconst formatDateLocal = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\n\nexport default function Journal({ user, onLogout }) {\n  const [entry, setEntry] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [saveMessage, setSaveMessage] = useState(\"\");\n  const [currentTimestamp, setCurrentTimestamp] = useState({ date: \"\", time: \"\" });\n  const [countdown, setCountdown] = useState(0);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [entriesForDate, setEntriesForDate] = useState([]);\n  const [localEntries, setLocalEntries] = useState({});\n\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownIntervalRef = useRef(null);\n\n  const generateTimestamp = () => {\n    const now = new Date();\n    return {\n      date: formatDateLocal(now),\n      time: now.toLocaleTimeString(),\n    };\n  };\n\n  useEffect(() => {\n    setCurrentTimestamp(generateTimestamp());\n  }, []);\n\n  const fetchEntriesForDate = async (dateToFetch) => {\n    const FETCH_API_URL =\n      window.location.hostname === \"localhost\"\n        ? \"http://localhost:8090/getEntries\"\n        : \"https://journal-whisper.onrender.com/getEntries\";\n\n    try {\n      const response = await fetch(FETCH_API_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ user, date: formatDateLocal(dateToFetch) }),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch entries\");\n      const data = await response.json();\n      setEntriesForDate(data.entries || []);\n    } catch (err) {\n      setEntriesForDate([]);\n    }\n  };\n\n  useEffect(() => {\n    fetchEntriesForDate(selectedDate);\n  }, [selectedDate, user]);\n\n  const startRecording = async (durationSeconds) => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      setSaveMessage(\"Audio recording not supported in this browser.\");\n      setShowToast(true);\n      return;\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      setRecordingDuration(durationSeconds);\n      setCurrentTimestamp(generateTimestamp());\n      setCountdown(durationSeconds);\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstart = () => {\n        setIsRecording(true);\n        setShowToast(true);\n        setSaveMessage(\"Recording in progress...\");\n        countdownIntervalRef.current = setInterval(() => {\n          setCountdown((prev) => {\n            if (prev <= 1) {\n              stopRecording();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      };\n\n      mediaRecorder.onstop = async () => {\n        clearInterval(countdownIntervalRef.current);\n        setCountdown(0);\n        setIsRecording(false);\n        setRecordingDuration(0);\n        setSaveMessage(\"\");\n\n        const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/webm\" });\n        try {\n          const formData = new FormData();\n          formData.append(\"file\", audioBlob, \"recording.webm\");\n          formData.append(\"user\", user);\n\n          const response = await fetch(PROXY_API_URL, {\n            method: \"POST\",\n            body: formData,\n          });\n\n          if (!response.ok)\n            throw new Error(`Transcription failed: ${response.statusText}`);\n\n          const data = await response.json();\n          if (data.transcription) {\n            setEntry(data.transcription);\n            setSaveMessage(\"Transcription received. Please review and save manually.\");\n            setShowToast(true);\n          } else {\n            setSaveMessage(\"No transcription received.\");\n            setShowToast(true);\n          }\n        } catch (error) {\n          setSaveMessage(\"Error during transcription: \" + error.message);\n          setShowToast(true);\n        }\n      };\n\n      mediaRecorder.start();\n    } catch (err) {\n      setSaveMessage(\"Could not start recording: \" + err.message);\n      setShowToast(true);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      mediaRecorderRef.current.stop();\n    }\n    clearInterval(countdownIntervalRef.current);\n    setIsRecording(false);\n  };\n\n  const saveToGoogleSheet = async (date, time, text, username) => {\n    const SAVE_API_URL =\n      window.location.hostname === \"localhost\"\n        ? \"http://localhost:8090/saveEntry\"\n        : \"https://journal-whisper.onrender.com/saveEntry\";\n\n    try {\n      const response = await fetch(SAVE_API_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ date, time, entry: text, user: username }),\n      });\n      if (!response.ok) throw new Error(\"Failed to save entry to Google Sheets\");\n      return await response.json();\n    } catch (error) {\n      setSaveMessage(\"Error saving to Google Sheets: \" + error.message);\n      setShowToast(true);\n      return null;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!entry.trim()) {\n      setSaveMessage(\"Please enter something before saving.\");\n      setShowToast(true);\n      return;\n    }\n    const result = await saveToGoogleSheet(\n      currentTimestamp.date,\n      currentTimestamp.time,\n      entry,\n      user\n    );\n    if (result) {\n      setSaveMessage(\"Journal entry saved!\");\n      setShowToast(true);\n      setEntry(\"\");\n      setCurrentTimestamp(generateTimestamp());\n\n      const savedDate = new Date(currentTimestamp.date + \"T00:00:00\");\n      setSelectedDate(savedDate);\n      fetchEntriesForDate(savedDate);\n\n      setLocalEntries((prev) => {\n        const dateKey = formatDateLocal(savedDate);\n        const existing = prev[dateKey] || [];\n        return {\n          ...prev,\n          [dateKey]: [entry, ...existing],\n        };\n      });\n    } else {\n      setSaveMessage(\"Failed to save entry. Please try again.\");\n      setShowToast(true);\n    }\n  };\n\n  const handleRefreshTime = () => {\n    setCurrentTimestamp(generateTimestamp());\n    setSaveMessage(\"\");\n  };\n\n  useEffect(() => {\n    return () => {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n        mediaRecorderRef.current.stop();\n      }\n      clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (saveMessage) {\n      const timer = setTimeout(() => setSaveMessage(\"\"), 6000);\n      return () => clearTimeout(timer);\n    }\n  }, [saveMessage]);\n\n  const getButtonProgress = () => {\n    if (recordingDuration === 0) return \"0%\";\n    const percent = ((recordingDuration - countdown) / recordingDuration) * 100;\n    return `${percent}%`;\n  };\n\n  return (\n    <div style={{ minHeight: \"100vh\", backgroundColor: \"#FFF8E7\", padding: \"2rem\", fontFamily: \"sans-serif\", maxWidth: 700, margin: \"auto\", color: \"#222\" }}>\n      {showToast && saveMessage && (\n        <div style={{ position: \"fixed\", top: \"40px\", left: \"50%\", transform: \"translateX(-50%)\", backgroundColor: \"#333\", color: \"white\", padding: \"10px 20px\", borderRadius: \"20px\", boxShadow: \"0 2px 10px rgba(0,0,0,0.7)\", zIndex: 9999, fontSize: \"1rem\", opacity: 0.9, userSelect: \"none\" }} aria-live=\"polite\">\n          {saveMessage}\n        </div>\n      )}\n\n      {localEntries[formatDateLocal(selectedDate)]?.length > 0 && (\n        <div style={{ marginTop: \"1rem\", padding: \"1rem\", backgroundColor: \"#e0ffe0\", borderRadius: \"8px\", border: \"1px solid #27ae60\" }}>\n          <h3>Journal entry saved!</h3>\n          <ul style={{ paddingLeft: \"1.2rem\" }}>\n            {localEntries[formatDateLocal(selectedDate)].map((text, idx) => (\n              <li key={idx} style={{ marginBottom: \"0.5rem\", whiteSpace: \"pre-wrap\" }}>{text}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}