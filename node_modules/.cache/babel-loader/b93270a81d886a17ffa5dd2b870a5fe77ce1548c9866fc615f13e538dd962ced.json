{"ast":null,"code":"var _jsxFileName = \"/Users/hye/Documents/journal-whisper/src/Journal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Calendar from \"react-calendar\";\nimport 'react-calendar/dist/Calendar.css';\nimport logo from \"./assets/logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PROXY_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:8090/transcribeAudio\" : \"https://journal-whisper.onrender.com/transcribeAudio\";\nconst formatDateLocal = date => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\nexport default function Journal({\n  user,\n  onLogout\n}) {\n  _s();\n  const [entry, setEntry] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [saveMessage, setSaveMessage] = useState(\"\");\n  const [currentTimestamp, setCurrentTimestamp] = useState({\n    date: \"\",\n    time: \"\"\n  });\n  const [countdown, setCountdown] = useState(0);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [entriesForDate, setEntriesForDate] = useState([]);\n  const [entriesByDate, setEntriesByDate] = useState({});\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownIntervalRef = useRef(null);\n  const generateTimestamp = () => {\n    const now = new Date();\n    return {\n      date: formatDateLocal(now),\n      time: now.toLocaleTimeString()\n    };\n  };\n  useEffect(() => {\n    setCurrentTimestamp(generateTimestamp());\n  }, []);\n  const fetchEntriesForDate = async dateToFetch => {\n    const url = window.location.hostname === \"localhost\" ? \"http://localhost:8090/getEntries\" : \"https://journal-whisper.onrender.com/getEntries\";\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user,\n          date: formatDateLocal(dateToFetch)\n        })\n      });\n      const data = await response.json();\n      setEntriesForDate(data.entries || []);\n    } catch {\n      setEntriesForDate([]);\n    }\n  };\n  const fetchAllEntriesByDate = async () => {\n    const url = window.location.hostname === \"localhost\" ? \"http://localhost:8090/getAllEntriesByUser\" : \"https://journal-whisper.onrender.com/getAllEntriesByUser\";\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user\n        })\n      });\n      const data = await response.json();\n      const byDate = {};\n      (data.entries || []).forEach(({\n        date\n      }) => {\n        byDate[date] = true;\n      });\n      setEntriesByDate(byDate);\n    } catch {\n      setEntriesByDate({});\n    }\n  };\n  useEffect(() => {\n    fetchEntriesForDate(selectedDate);\n  }, [selectedDate, user]);\n  useEffect(() => {\n    if (user) fetchAllEntriesByDate();\n  }, [user]);\n  const startRecording = async durationSeconds => {\n    var _navigator$mediaDevic;\n    if (!((_navigator$mediaDevic = navigator.mediaDevices) !== null && _navigator$mediaDevic !== void 0 && _navigator$mediaDevic.getUserMedia)) {\n      setSaveMessage(\"Audio recording not supported in this browser.\");\n      setShowToast(true);\n      return;\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      setRecordingDuration(durationSeconds);\n      setCurrentTimestamp(generateTimestamp());\n      setCountdown(durationSeconds);\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) audioChunksRef.current.push(event.data);\n      };\n      mediaRecorder.onstart = () => {\n        setIsRecording(true);\n        setShowToast(true);\n        setSaveMessage(\"Recording in progress...\");\n        countdownIntervalRef.current = setInterval(() => {\n          setCountdown(prev => {\n            if (prev <= 1) {\n              stopRecording();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      };\n      mediaRecorder.onstop = async () => {\n        clearInterval(countdownIntervalRef.current);\n        setCountdown(0);\n        setIsRecording(false);\n        setRecordingDuration(0);\n        setSaveMessage(\"\");\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: \"audio/webm\"\n        });\n        try {\n          const formData = new FormData();\n          formData.append(\"file\", audioBlob, \"recording.webm\");\n          formData.append(\"user\", user);\n          const response = await fetch(PROXY_API_URL, {\n            method: \"POST\",\n            body: formData\n          });\n          const data = await response.json();\n          if (data.transcription) {\n            setEntry(data.transcription);\n            setSaveMessage(\"Transcription received. Please review and save manually.\");\n          } else {\n            setSaveMessage(\"No transcription received.\");\n          }\n          setShowToast(true);\n        } catch (error) {\n          setSaveMessage(\"Error during transcription: \" + error.message);\n          setShowToast(true);\n        }\n      };\n      mediaRecorder.start();\n    } catch (err) {\n      setSaveMessage(\"Could not start recording: \" + err.message);\n      setShowToast(true);\n    }\n  };\n  const stopRecording = () => {\n    var _mediaRecorderRef$cur;\n    (_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.stop();\n    clearInterval(countdownIntervalRef.current);\n    setIsRecording(false);\n  };\n  const saveToGoogleSheet = async (date, time, text, username) => {\n    const url = window.location.hostname === \"localhost\" ? \"http://localhost:8090/saveEntry\" : \"https://journal-whisper.onrender.com/saveEntry\";\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          date,\n          time,\n          entry: text,\n          user: username\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      setSaveMessage(\"Error saving to Google Sheets: \" + error.message);\n      setShowToast(true);\n      return null;\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!entry.trim()) {\n      setSaveMessage(\"Please enter something before saving.\");\n      setShowToast(true);\n      return;\n    }\n    const result = await saveToGoogleSheet(currentTimestamp.date, currentTimestamp.time, entry, user);\n    if (result) {\n      const newEntry = {\n        date: currentTimestamp.date,\n        time: currentTimestamp.time,\n        entry\n      };\n\n      // Optimistic UI update\n      setEntriesForDate(prev => [newEntry, ...prev]);\n      setEntriesByDate(prev => ({\n        ...prev,\n        [currentTimestamp.date]: true\n      }));\n      setSaveMessage(\"Journal entry saved successfully!\");\n      setShowToast(true);\n      setEntry(\"\");\n      const newTimestamp = generateTimestamp();\n      setCurrentTimestamp(newTimestamp);\n      setSelectedDate(new Date(newEntry.date + \"T00:00:00\"));\n      fetchEntriesForDate(new Date(newEntry.date + \"T00:00:00\"));\n      fetchAllEntriesByDate();\n    } else {\n      setSaveMessage(\"Failed to save entry. Please try again.\");\n      setShowToast(true);\n    }\n  };\n  const handleRefreshTime = () => {\n    setCurrentTimestamp(generateTimestamp());\n    setSaveMessage(\"\");\n  };\n  useEffect(() => {\n    return () => {\n      var _mediaRecorderRef$cur2;\n      if (((_mediaRecorderRef$cur2 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur2 === void 0 ? void 0 : _mediaRecorderRef$cur2.state) !== \"inactive\") {\n        mediaRecorderRef.current.stop();\n      }\n      clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    if (saveMessage) {\n      const timer = setTimeout(() => setSaveMessage(\"\"), 6000);\n      return () => clearTimeout(timer);\n    }\n  }, [saveMessage]);\n  const getButtonProgress = () => {\n    if (recordingDuration === 0) return \"0%\";\n    const percent = (recordingDuration - countdown) / recordingDuration * 100;\n    return `${percent}%`;\n  };\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    if (view === \"month\") {\n      const dateStr = formatDateLocal(date);\n      return entriesByDate[dateStr] ? \"highlighted-date\" : null;\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: \"100vh\",\n      backgroundColor: \"#FFF8E7\",\n      padding: \"2rem\",\n      fontFamily: \"sans-serif\",\n      maxWidth: 700,\n      margin: \"auto\",\n      color: \"#222\"\n    },\n    children: [showToast && saveMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"40px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        backgroundColor: \"#333\",\n        color: \"white\",\n        padding: \"10px 20px\",\n        borderRadius: \"20px\",\n        boxShadow: \"0 2px 10px rgba(0,0,0,0.7)\",\n        zIndex: 9999\n      },\n      children: saveMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        .highlighted-date {\n          background-color: #ffeb3b !important;\n          border-radius: 50% !important;\n          color: black !important;\n          font-weight: 600;\n        }\n        .highlighted-date:hover {\n          background-color: #fbc02d !important;\n          color: black !important;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n}\n_s(Journal, \"qgc8wXaQ2FXyT5aQ0U98udnq3C8=\");\n_c = Journal;\nvar _c;\n$RefreshReg$(_c, \"Journal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Calendar","logo","jsxDEV","_jsxDEV","PROXY_API_URL","window","location","hostname","formatDateLocal","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","Journal","user","onLogout","_s","entry","setEntry","isRecording","setIsRecording","showToast","setShowToast","saveMessage","setSaveMessage","currentTimestamp","setCurrentTimestamp","time","countdown","setCountdown","recordingDuration","setRecordingDuration","selectedDate","setSelectedDate","Date","entriesForDate","setEntriesForDate","entriesByDate","setEntriesByDate","mediaRecorderRef","audioChunksRef","countdownIntervalRef","generateTimestamp","now","toLocaleTimeString","fetchEntriesForDate","dateToFetch","url","response","fetch","method","headers","body","JSON","stringify","data","json","entries","fetchAllEntriesByDate","byDate","forEach","startRecording","durationSeconds","_navigator$mediaDevic","navigator","mediaDevices","getUserMedia","stream","audio","mediaRecorder","MediaRecorder","current","ondataavailable","event","size","push","onstart","setInterval","prev","stopRecording","onstop","clearInterval","audioBlob","Blob","type","formData","FormData","append","transcription","error","message","start","err","_mediaRecorderRef$cur","stop","saveToGoogleSheet","text","username","handleSubmit","e","preventDefault","trim","result","newEntry","newTimestamp","handleRefreshTime","_mediaRecorderRef$cur2","state","timer","setTimeout","clearTimeout","getButtonProgress","percent","tileClassName","view","dateStr","style","minHeight","backgroundColor","padding","fontFamily","maxWidth","margin","color","children","position","top","left","transform","borderRadius","boxShadow","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hye/Documents/journal-whisper/src/Journal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Calendar from \"react-calendar\";\nimport 'react-calendar/dist/Calendar.css';\nimport logo from \"./assets/logo.png\";\n\nconst PROXY_API_URL =\n  window.location.hostname === \"localhost\"\n    ? \"http://localhost:8090/transcribeAudio\"\n    : \"https://journal-whisper.onrender.com/transcribeAudio\";\n\nconst formatDateLocal = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\n\nexport default function Journal({ user, onLogout }) {\n  const [entry, setEntry] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [saveMessage, setSaveMessage] = useState(\"\");\n  const [currentTimestamp, setCurrentTimestamp] = useState({ date: \"\", time: \"\" });\n  const [countdown, setCountdown] = useState(0);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [entriesForDate, setEntriesForDate] = useState([]);\n  const [entriesByDate, setEntriesByDate] = useState({});\n\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownIntervalRef = useRef(null);\n\n  const generateTimestamp = () => {\n    const now = new Date();\n    return {\n      date: formatDateLocal(now),\n      time: now.toLocaleTimeString(),\n    };\n  };\n\n  useEffect(() => {\n    setCurrentTimestamp(generateTimestamp());\n  }, []);\n\n  const fetchEntriesForDate = async (dateToFetch) => {\n    const url = window.location.hostname === \"localhost\"\n      ? \"http://localhost:8090/getEntries\"\n      : \"https://journal-whisper.onrender.com/getEntries\";\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          user,\n          date: formatDateLocal(dateToFetch),\n        }),\n      });\n      const data = await response.json();\n      setEntriesForDate(data.entries || []);\n    } catch {\n      setEntriesForDate([]);\n    }\n  };\n\n  const fetchAllEntriesByDate = async () => {\n    const url = window.location.hostname === \"localhost\"\n      ? \"http://localhost:8090/getAllEntriesByUser\"\n      : \"https://journal-whisper.onrender.com/getAllEntriesByUser\";\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ user }),\n      });\n      const data = await response.json();\n      const byDate = {};\n      (data.entries || []).forEach(({ date }) => {\n        byDate[date] = true;\n      });\n      setEntriesByDate(byDate);\n    } catch {\n      setEntriesByDate({});\n    }\n  };\n\n  useEffect(() => {\n    fetchEntriesForDate(selectedDate);\n  }, [selectedDate, user]);\n\n  useEffect(() => {\n    if (user) fetchAllEntriesByDate();\n  }, [user]);\n\n  const startRecording = async (durationSeconds) => {\n    if (!navigator.mediaDevices?.getUserMedia) {\n      setSaveMessage(\"Audio recording not supported in this browser.\");\n      setShowToast(true);\n      return;\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      setRecordingDuration(durationSeconds);\n      setCurrentTimestamp(generateTimestamp());\n      setCountdown(durationSeconds);\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) audioChunksRef.current.push(event.data);\n      };\n\n      mediaRecorder.onstart = () => {\n        setIsRecording(true);\n        setShowToast(true);\n        setSaveMessage(\"Recording in progress...\");\n        countdownIntervalRef.current = setInterval(() => {\n          setCountdown((prev) => {\n            if (prev <= 1) {\n              stopRecording();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      };\n\n      mediaRecorder.onstop = async () => {\n        clearInterval(countdownIntervalRef.current);\n        setCountdown(0);\n        setIsRecording(false);\n        setRecordingDuration(0);\n        setSaveMessage(\"\");\n\n        const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/webm\" });\n\n        try {\n          const formData = new FormData();\n          formData.append(\"file\", audioBlob, \"recording.webm\");\n          formData.append(\"user\", user);\n\n          const response = await fetch(PROXY_API_URL, {\n            method: \"POST\",\n            body: formData,\n          });\n\n          const data = await response.json();\n          if (data.transcription) {\n            setEntry(data.transcription);\n            setSaveMessage(\"Transcription received. Please review and save manually.\");\n          } else {\n            setSaveMessage(\"No transcription received.\");\n          }\n          setShowToast(true);\n        } catch (error) {\n          setSaveMessage(\"Error during transcription: \" + error.message);\n          setShowToast(true);\n        }\n      };\n\n      mediaRecorder.start();\n    } catch (err) {\n      setSaveMessage(\"Could not start recording: \" + err.message);\n      setShowToast(true);\n    }\n  };\n\n  const stopRecording = () => {\n    mediaRecorderRef.current?.stop();\n    clearInterval(countdownIntervalRef.current);\n    setIsRecording(false);\n  };\n\n  const saveToGoogleSheet = async (date, time, text, username) => {\n    const url = window.location.hostname === \"localhost\"\n      ? \"http://localhost:8090/saveEntry\"\n      : \"https://journal-whisper.onrender.com/saveEntry\";\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ date, time, entry: text, user: username }),\n      });\n      return await response.json();\n    } catch (error) {\n      setSaveMessage(\"Error saving to Google Sheets: \" + error.message);\n      setShowToast(true);\n      return null;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!entry.trim()) {\n      setSaveMessage(\"Please enter something before saving.\");\n      setShowToast(true);\n      return;\n    }\n\n    const result = await saveToGoogleSheet(\n      currentTimestamp.date,\n      currentTimestamp.time,\n      entry,\n      user\n    );\n\n    if (result) {\n      const newEntry = {\n        date: currentTimestamp.date,\n        time: currentTimestamp.time,\n        entry,\n      };\n\n      // Optimistic UI update\n      setEntriesForDate((prev) => [newEntry, ...prev]);\n      setEntriesByDate((prev) => ({\n        ...prev,\n        [currentTimestamp.date]: true,\n      }));\n\n      setSaveMessage(\"Journal entry saved successfully!\");\n      setShowToast(true);\n      setEntry(\"\");\n      const newTimestamp = generateTimestamp();\n      setCurrentTimestamp(newTimestamp);\n      setSelectedDate(new Date(newEntry.date + \"T00:00:00\"));\n\n      fetchEntriesForDate(new Date(newEntry.date + \"T00:00:00\"));\n      fetchAllEntriesByDate();\n    } else {\n      setSaveMessage(\"Failed to save entry. Please try again.\");\n      setShowToast(true);\n    }\n  };\n\n  const handleRefreshTime = () => {\n    setCurrentTimestamp(generateTimestamp());\n    setSaveMessage(\"\");\n  };\n\n  useEffect(() => {\n    return () => {\n      if (mediaRecorderRef.current?.state !== \"inactive\") {\n        mediaRecorderRef.current.stop();\n      }\n      clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (saveMessage) {\n      const timer = setTimeout(() => setSaveMessage(\"\"), 6000);\n      return () => clearTimeout(timer);\n    }\n  }, [saveMessage]);\n\n  const getButtonProgress = () => {\n    if (recordingDuration === 0) return \"0%\";\n    const percent = ((recordingDuration - countdown) / recordingDuration) * 100;\n    return `${percent}%`;\n  };\n\n  const tileClassName = ({ date, view }) => {\n    if (view === \"month\") {\n      const dateStr = formatDateLocal(date);\n      return entriesByDate[dateStr] ? \"highlighted-date\" : null;\n    }\n    return null;\n  };\n\n  return (\n    <div style={{ minHeight: \"100vh\", backgroundColor: \"#FFF8E7\", padding: \"2rem\", fontFamily: \"sans-serif\", maxWidth: 700, margin: \"auto\", color: \"#222\" }}>\n      {showToast && saveMessage && (\n        <div style={{ position: \"fixed\", top: \"40px\", left: \"50%\", transform: \"translateX(-50%)\", backgroundColor: \"#333\", color: \"white\", padding: \"10px 20px\", borderRadius: \"20px\", boxShadow: \"0 2px 10px rgba(0,0,0,0.7)\", zIndex: 9999 }}>\n          {saveMessage}\n        </div>\n      )}\n\n      {/* UI continues: logo, controls, calendar, entries... */}\n      {/* Full JSX as in your version, unchanged, aside from updated handleSubmit */}\n\n      {/* Additional styles */}\n      <style>{`\n        .highlighted-date {\n          background-color: #ffeb3b !important;\n          border-radius: 50% !important;\n          color: black !important;\n          font-weight: 600;\n        }\n        .highlighted-date:hover {\n          background-color: #fbc02d !important;\n          color: black !important;\n        }\n      `}</style>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}