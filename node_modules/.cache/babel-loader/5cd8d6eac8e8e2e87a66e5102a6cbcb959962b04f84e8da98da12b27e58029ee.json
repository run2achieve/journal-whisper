{"ast":null,"code":"import mimicFunction from 'mimic-function';\nconst cacheStore = new WeakMap();\nconst cacheTimerStore = new WeakMap();\n/**\n[Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input.\n\n@param function_ - The function to be memoized.\n\n@example\n```\nimport memoize from 'memoize';\n\nlet index = 0;\nconst counter = () => ++index;\nconst memoized = memoize(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same argument\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the arguments changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n```\n*/\nexport default function memoize(function_) {\n  let {\n    cacheKey,\n    cache = new Map(),\n    maxAge\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (maxAge === 0) {\n    return function_;\n  }\n  if (typeof maxAge === 'number') {\n    const maxSetIntervalValue = 2147483647;\n    if (maxAge > maxSetIntervalValue) {\n      throw new TypeError(\"The `maxAge` option cannot exceed \".concat(maxSetIntervalValue, \".\"));\n    }\n    if (maxAge < 0) {\n      throw new TypeError('The `maxAge` option should not be a negative number.');\n    }\n  }\n  const memoized = function () {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n    const key = cacheKey ? cacheKey(arguments_) : arguments_[0];\n    const cacheItem = cache.get(key);\n    if (cacheItem) {\n      return cacheItem.data;\n    }\n    const result = function_.apply(this, arguments_);\n    const computedMaxAge = typeof maxAge === 'function' ? maxAge(...arguments_) : maxAge;\n    cache.set(key, {\n      data: result,\n      maxAge: computedMaxAge ? Date.now() + computedMaxAge : Number.POSITIVE_INFINITY\n    });\n    if (computedMaxAge && computedMaxAge > 0 && computedMaxAge !== Number.POSITIVE_INFINITY) {\n      var _timer$unref, _cacheTimerStore$get;\n      const timer = setTimeout(() => {\n        cache.delete(key);\n      }, computedMaxAge);\n      (_timer$unref = timer.unref) === null || _timer$unref === void 0 || _timer$unref.call(timer);\n      const timers = (_cacheTimerStore$get = cacheTimerStore.get(function_)) !== null && _cacheTimerStore$get !== void 0 ? _cacheTimerStore$get : new Set();\n      timers.add(timer);\n      cacheTimerStore.set(function_, timers);\n    }\n    return result;\n  };\n  mimicFunction(memoized, function_, {\n    ignoreNonConfigurable: true\n  });\n  cacheStore.set(memoized, cache);\n  return memoized;\n}\n/**\n@returns A [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.\n\n@example\n```\nimport {memoizeDecorator} from 'memoize';\n\nclass Example {\n    index = 0\n\n    @memoizeDecorator()\n    counter() {\n        return ++this.index;\n    }\n}\n\nclass ExampleWithOptions {\n    index = 0\n\n    @memoizeDecorator({maxAge: 1000})\n    counter() {\n        return ++this.index;\n    }\n}\n```\n*/\nexport function memoizeDecorator() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const instanceMap = new WeakMap();\n  return (target, propertyKey, descriptor) => {\n    const input = target[propertyKey]; // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n    if (typeof input !== 'function') {\n      throw new TypeError('The decorated value must be a function');\n    }\n    delete descriptor.value;\n    delete descriptor.writable;\n    descriptor.get = function () {\n      if (!instanceMap.has(this)) {\n        const value = memoize(input, options);\n        instanceMap.set(this, value);\n        return value;\n      }\n      return instanceMap.get(this);\n    };\n  };\n}\n/**\nClear all cached data of a memoized function.\n\n@param function_ - The memoized function.\n*/\nexport function memoizeClear(function_) {\n  const cache = cacheStore.get(function_);\n  if (!cache) {\n    throw new TypeError('Can\\'t clear a function that was not memoized!');\n  }\n  if (typeof cache.clear !== 'function') {\n    throw new TypeError('The cache Map can\\'t be cleared!');\n  }\n  cache.clear();\n  for (const timer of (_cacheTimerStore$get2 = cacheTimerStore.get(function_)) !== null && _cacheTimerStore$get2 !== void 0 ? _cacheTimerStore$get2 : []) {\n    var _cacheTimerStore$get2;\n    clearTimeout(timer);\n  }\n}","map":{"version":3,"names":["mimicFunction","cacheStore","WeakMap","cacheTimerStore","memoize","function_","cacheKey","cache","Map","maxAge","arguments","length","undefined","maxSetIntervalValue","TypeError","concat","memoized","_len","arguments_","Array","_key","key","cacheItem","get","data","result","apply","computedMaxAge","set","Date","now","Number","POSITIVE_INFINITY","_timer$unref","_cacheTimerStore$get","timer","setTimeout","delete","unref","call","timers","Set","add","ignoreNonConfigurable","memoizeDecorator","options","instanceMap","target","propertyKey","descriptor","input","value","writable","has","memoizeClear","clear","_cacheTimerStore$get2","clearTimeout"],"sources":["/Users/hye/Documents/journal-whisper/node_modules/memoize/distribution/index.js"],"sourcesContent":["import mimicFunction from 'mimic-function';\nconst cacheStore = new WeakMap();\nconst cacheTimerStore = new WeakMap();\n/**\n[Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input.\n\n@param function_ - The function to be memoized.\n\n@example\n```\nimport memoize from 'memoize';\n\nlet index = 0;\nconst counter = () => ++index;\nconst memoized = memoize(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same argument\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the arguments changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n```\n*/\nexport default function memoize(function_, { cacheKey, cache = new Map(), maxAge, } = {}) {\n    if (maxAge === 0) {\n        return function_;\n    }\n    if (typeof maxAge === 'number') {\n        const maxSetIntervalValue = 2_147_483_647;\n        if (maxAge > maxSetIntervalValue) {\n            throw new TypeError(`The \\`maxAge\\` option cannot exceed ${maxSetIntervalValue}.`);\n        }\n        if (maxAge < 0) {\n            throw new TypeError('The `maxAge` option should not be a negative number.');\n        }\n    }\n    const memoized = function (...arguments_) {\n        const key = cacheKey ? cacheKey(arguments_) : arguments_[0];\n        const cacheItem = cache.get(key);\n        if (cacheItem) {\n            return cacheItem.data;\n        }\n        const result = function_.apply(this, arguments_);\n        const computedMaxAge = typeof maxAge === 'function' ? maxAge(...arguments_) : maxAge;\n        cache.set(key, {\n            data: result,\n            maxAge: computedMaxAge ? Date.now() + computedMaxAge : Number.POSITIVE_INFINITY,\n        });\n        if (computedMaxAge && computedMaxAge > 0 && computedMaxAge !== Number.POSITIVE_INFINITY) {\n            const timer = setTimeout(() => {\n                cache.delete(key);\n            }, computedMaxAge);\n            timer.unref?.();\n            const timers = cacheTimerStore.get(function_) ?? new Set();\n            timers.add(timer);\n            cacheTimerStore.set(function_, timers);\n        }\n        return result;\n    };\n    mimicFunction(memoized, function_, {\n        ignoreNonConfigurable: true,\n    });\n    cacheStore.set(memoized, cache);\n    return memoized;\n}\n/**\n@returns A [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.\n\n@example\n```\nimport {memoizeDecorator} from 'memoize';\n\nclass Example {\n    index = 0\n\n    @memoizeDecorator()\n    counter() {\n        return ++this.index;\n    }\n}\n\nclass ExampleWithOptions {\n    index = 0\n\n    @memoizeDecorator({maxAge: 1000})\n    counter() {\n        return ++this.index;\n    }\n}\n```\n*/\nexport function memoizeDecorator(options = {}) {\n    const instanceMap = new WeakMap();\n    return (target, propertyKey, descriptor) => {\n        const input = target[propertyKey]; // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n        if (typeof input !== 'function') {\n            throw new TypeError('The decorated value must be a function');\n        }\n        delete descriptor.value;\n        delete descriptor.writable;\n        descriptor.get = function () {\n            if (!instanceMap.has(this)) {\n                const value = memoize(input, options);\n                instanceMap.set(this, value);\n                return value;\n            }\n            return instanceMap.get(this);\n        };\n    };\n}\n/**\nClear all cached data of a memoized function.\n\n@param function_ - The memoized function.\n*/\nexport function memoizeClear(function_) {\n    const cache = cacheStore.get(function_);\n    if (!cache) {\n        throw new TypeError('Can\\'t clear a function that was not memoized!');\n    }\n    if (typeof cache.clear !== 'function') {\n        throw new TypeError('The cache Map can\\'t be cleared!');\n    }\n    cache.clear();\n    for (const timer of cacheTimerStore.get(function_) ?? []) {\n        clearTimeout(timer);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}