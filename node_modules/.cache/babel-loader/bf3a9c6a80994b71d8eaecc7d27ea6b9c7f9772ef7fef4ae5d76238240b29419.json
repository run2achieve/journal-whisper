{"ast":null,"code":"var _jsxFileName = \"/Users/hye/Documents/journal-whisper/src/Journal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport logo from \"./assets/logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PROXY_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:8090/transcribeAudio\" : \"https://journal-whisper.onrender.com/transcribeAudio\";\nconst formatDateLocal = date => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\nexport default function Journal({\n  user,\n  onLogout\n}) {\n  _s();\n  const [entry, setEntry] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [saveMessage, setSaveMessage] = useState(\"\");\n  const [isSavePressed, setIsSavePressed] = useState(false);\n  const [currentTimestamp, setCurrentTimestamp] = useState({\n    date: \"\",\n    time: \"\"\n  });\n  const [countdown, setCountdown] = useState(0);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [entriesForDate, setEntriesForDate] = useState([]);\n  const [localEntries, setLocalEntries] = useState({});\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownIntervalRef = useRef(null);\n  const generateTimestamp = () => {\n    const now = new Date();\n    return {\n      date: formatDateLocal(now),\n      time: now.toLocaleTimeString()\n    };\n  };\n  useEffect(() => {\n    setCurrentTimestamp(generateTimestamp());\n  }, []);\n  const fetchEntriesForDate = async dateToFetch => {\n    const FETCH_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:8090/getEntries\" : \"https://journal-whisper.onrender.com/getEntries\";\n    try {\n      const response = await fetch(FETCH_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user,\n          date: formatDateLocal(dateToFetch)\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch entries\");\n      const data = await response.json();\n      setEntriesForDate(data.entries || []);\n    } catch (err) {\n      setEntriesForDate([]);\n    }\n  };\n  useEffect(() => {\n    fetchEntriesForDate(selectedDate);\n    setEntry(\"\");\n    setShowToast(false);\n    setSaveMessage(\"\");\n  }, [selectedDate, user]);\n  const startRecording = async durationSeconds => {\n    var _navigator$mediaDevic;\n    if (!((_navigator$mediaDevic = navigator.mediaDevices) !== null && _navigator$mediaDevic !== void 0 && _navigator$mediaDevic.getUserMedia)) {\n      setSaveMessage(\"Audio recording not supported in this browser.\");\n      setShowToast(true);\n      return;\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      setRecordingDuration(durationSeconds);\n      setCurrentTimestamp(generateTimestamp());\n      setCountdown(durationSeconds);\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstart = () => {\n        setIsRecording(true);\n        setShowToast(true);\n        setSaveMessage(\"Recording in progress...\");\n        countdownIntervalRef.current = setInterval(() => {\n          setCountdown(prev => {\n            if (prev <= 1) {\n              stopRecording();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      };\n      mediaRecorder.onstop = async () => {\n        clearInterval(countdownIntervalRef.current);\n        setCountdown(0);\n        setIsRecording(false);\n        setRecordingDuration(0);\n        setSaveMessage(\"\");\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: \"audio/webm\"\n        });\n        try {\n          const formData = new FormData();\n          formData.append(\"file\", audioBlob, \"recording.webm\");\n          formData.append(\"user\", user);\n          const response = await fetch(PROXY_API_URL, {\n            method: \"POST\",\n            body: formData\n          });\n          if (!response.ok) throw new Error(`Transcription failed: ${response.statusText}`);\n          const data = await response.json();\n          if (data.transcription) {\n            setEntry(data.transcription);\n            setSaveMessage(\"Transcription received. Please review and save manually.\");\n          } else {\n            setSaveMessage(\"No transcription received.\");\n          }\n          setShowToast(true);\n        } catch (error) {\n          setSaveMessage(\"Error during transcription: \" + error.message);\n          setShowToast(true);\n        }\n      };\n      mediaRecorder.start();\n    } catch (err) {\n      setSaveMessage(\"Could not start recording: \" + err.message);\n      setShowToast(true);\n    }\n  };\n  const stopRecording = () => {\n    var _mediaRecorderRef$cur;\n    ((_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.state) !== \"inactive\" && mediaRecorderRef.current.stop();\n    clearInterval(countdownIntervalRef.current);\n    setIsRecording(false);\n  };\n  const saveToGoogleSheet = async (date, time, text, username) => {\n    const SAVE_API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:8090/saveEntry\" : \"https://journal-whisper.onrender.com/saveEntry\";\n    try {\n      const response = await fetch(SAVE_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          date,\n          time,\n          entry: text,\n          user: username\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to save entry to Google Sheets\");\n      return await response.json();\n    } catch (error) {\n      setSaveMessage(\"Error saving to Google Sheets: \" + error.message);\n      setShowToast(true);\n      return null;\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSavePressed(true);\n    setTimeout(() => setIsSavePressed(false), 150);\n    if (!entry.trim()) {\n      setSaveMessage(\"Please enter something before saving.\");\n      setShowToast(true);\n      return;\n    }\n    const result = await saveToGoogleSheet(currentTimestamp.date, currentTimestamp.time, entry, user);\n    if (result) {\n      setSaveMessage(\"Journal entry saved successfully!\");\n      setShowToast(true);\n      setEntry(\"\");\n      setCurrentTimestamp(generateTimestamp());\n      const savedDate = new Date(currentTimestamp.date + \"T00:00:00\");\n      setSelectedDate(savedDate);\n      fetchEntriesForDate(savedDate);\n      setLocalEntries(prev => ({\n        ...prev,\n        [formatDateLocal(savedDate)]: entry\n      }));\n    } else {\n      setSaveMessage(\"Failed to save entry. Please try again.\");\n      setShowToast(true);\n    }\n  };\n  const handleRefreshTime = () => {\n    setCurrentTimestamp(generateTimestamp());\n    setSaveMessage(\"\");\n  };\n  useEffect(() => {\n    return () => {\n      var _mediaRecorderRef$cur2;\n      ((_mediaRecorderRef$cur2 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur2 === void 0 ? void 0 : _mediaRecorderRef$cur2.state) !== \"inactive\" && mediaRecorderRef.current.stop();\n      clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    if (saveMessage) {\n      const timer = setTimeout(() => setSaveMessage(\"\"), 6000);\n      return () => clearTimeout(timer);\n    }\n  }, [saveMessage]);\n  const getButtonProgress = () => {\n    if (recordingDuration === 0) return \"0%\";\n    const percent = (recordingDuration - countdown) / recordingDuration * 100;\n    return `${percent}%`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: \"100vh\",\n      backgroundColor: \"#FFF8E7\",\n      padding: \"2rem\",\n      fontFamily: \"sans-serif\",\n      maxWidth: 700,\n      margin: \"auto\",\n      color: \"#222\"\n    },\n    children: [showToast && saveMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"40px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        backgroundColor: \"#333\",\n        color: \"white\",\n        padding: \"10px 20px\",\n        borderRadius: \"20px\",\n        boxShadow: \"0 2px 10px rgba(0,0,0,0.7)\",\n        zIndex: 9999,\n        fontSize: \"1rem\",\n        opacity: 0.9,\n        userSelect: \"none\"\n      },\n      children: saveMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Write your journal entry here...\",\n        value: entry,\n        onChange: e => setEntry(e.target.value),\n        style: {\n          width: \"100%\",\n          height: \"150px\",\n          fontSize: \"1rem\",\n          padding: \"0.75rem\",\n          borderRadius: 8,\n          border: \"1px solid #ccc\",\n          resize: \"vertical\",\n          marginBottom: \"1rem\",\n          fontFamily: \"inherit\"\n        },\n        disabled: isRecording\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"right\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isRecording,\n          style: {\n            padding: \"0.6rem 1.5rem\",\n            fontSize: \"1rem\",\n            backgroundColor: \"#27ae60\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"8px\",\n            cursor: isRecording ? \"not-allowed\" : \"pointer\",\n            userSelect: \"none\",\n            fontWeight: \"600\",\n            transform: isSavePressed ? \"translateY(2px)\" : \"none\",\n            boxShadow: isSavePressed ? \"inset 0 2px 4px rgba(0,0,0,0.2)\" : \"0 2px 5px rgba(0,0,0,0.2)\",\n            transition: \"transform 0.1s, box-shadow 0.1s\"\n          },\n          children: \"Save Entry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n}\n_s(Journal, \"XfpG0/b2trfpS1/ZvTH4Dc+5u/o=\");\n_c = Journal;\nvar _c;\n$RefreshReg$(_c, \"Journal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Calendar","logo","jsxDEV","_jsxDEV","PROXY_API_URL","window","location","hostname","formatDateLocal","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","Journal","user","onLogout","_s","entry","setEntry","isRecording","setIsRecording","showToast","setShowToast","saveMessage","setSaveMessage","isSavePressed","setIsSavePressed","currentTimestamp","setCurrentTimestamp","time","countdown","setCountdown","recordingDuration","setRecordingDuration","selectedDate","setSelectedDate","Date","entriesForDate","setEntriesForDate","localEntries","setLocalEntries","mediaRecorderRef","audioChunksRef","countdownIntervalRef","generateTimestamp","now","toLocaleTimeString","fetchEntriesForDate","dateToFetch","FETCH_API_URL","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","entries","err","startRecording","durationSeconds","_navigator$mediaDevic","navigator","mediaDevices","getUserMedia","stream","audio","mediaRecorder","MediaRecorder","current","ondataavailable","event","size","push","onstart","setInterval","prev","stopRecording","onstop","clearInterval","audioBlob","Blob","type","formData","FormData","append","statusText","transcription","error","message","start","_mediaRecorderRef$cur","state","stop","saveToGoogleSheet","text","username","SAVE_API_URL","handleSubmit","e","preventDefault","setTimeout","trim","result","savedDate","handleRefreshTime","_mediaRecorderRef$cur2","timer","clearTimeout","getButtonProgress","percent","style","minHeight","backgroundColor","padding","fontFamily","maxWidth","margin","color","children","position","top","left","transform","borderRadius","boxShadow","zIndex","fontSize","opacity","userSelect","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","target","width","height","border","resize","marginBottom","disabled","textAlign","cursor","fontWeight","transition","_c","$RefreshReg$"],"sources":["/Users/hye/Documents/journal-whisper/src/Journal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport logo from \"./assets/logo.png\";\n\nconst PROXY_API_URL =\n  window.location.hostname === \"localhost\"\n    ? \"http://localhost:8090/transcribeAudio\"\n    : \"https://journal-whisper.onrender.com/transcribeAudio\";\n\nconst formatDateLocal = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\n\nexport default function Journal({ user, onLogout }) {\n  const [entry, setEntry] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [saveMessage, setSaveMessage] = useState(\"\");\n  const [isSavePressed, setIsSavePressed] = useState(false);\n  const [currentTimestamp, setCurrentTimestamp] = useState({ date: \"\", time: \"\" });\n  const [countdown, setCountdown] = useState(0);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [entriesForDate, setEntriesForDate] = useState([]);\n  const [localEntries, setLocalEntries] = useState({});\n\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownIntervalRef = useRef(null);\n\n  const generateTimestamp = () => {\n    const now = new Date();\n    return {\n      date: formatDateLocal(now),\n      time: now.toLocaleTimeString(),\n    };\n  };\n\n  useEffect(() => {\n    setCurrentTimestamp(generateTimestamp());\n  }, []);\n\n  const fetchEntriesForDate = async (dateToFetch) => {\n    const FETCH_API_URL =\n      window.location.hostname === \"localhost\"\n        ? \"http://localhost:8090/getEntries\"\n        : \"https://journal-whisper.onrender.com/getEntries\";\n\n    try {\n      const response = await fetch(FETCH_API_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ user, date: formatDateLocal(dateToFetch) }),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch entries\");\n      const data = await response.json();\n      setEntriesForDate(data.entries || []);\n    } catch (err) {\n      setEntriesForDate([]);\n    }\n  };\n\n  useEffect(() => {\n    fetchEntriesForDate(selectedDate);\n    setEntry(\"\");\n    setShowToast(false);\n    setSaveMessage(\"\");\n  }, [selectedDate, user]);\n\n  const startRecording = async (durationSeconds) => {\n    if (!navigator.mediaDevices?.getUserMedia) {\n      setSaveMessage(\"Audio recording not supported in this browser.\");\n      setShowToast(true);\n      return;\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      setRecordingDuration(durationSeconds);\n      setCurrentTimestamp(generateTimestamp());\n      setCountdown(durationSeconds);\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstart = () => {\n        setIsRecording(true);\n        setShowToast(true);\n        setSaveMessage(\"Recording in progress...\");\n        countdownIntervalRef.current = setInterval(() => {\n          setCountdown((prev) => {\n            if (prev <= 1) {\n              stopRecording();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      };\n\n      mediaRecorder.onstop = async () => {\n        clearInterval(countdownIntervalRef.current);\n        setCountdown(0);\n        setIsRecording(false);\n        setRecordingDuration(0);\n        setSaveMessage(\"\");\n\n        const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/webm\" });\n\n        try {\n          const formData = new FormData();\n          formData.append(\"file\", audioBlob, \"recording.webm\");\n          formData.append(\"user\", user);\n\n          const response = await fetch(PROXY_API_URL, {\n            method: \"POST\",\n            body: formData,\n          });\n\n          if (!response.ok)\n            throw new Error(`Transcription failed: ${response.statusText}`);\n\n          const data = await response.json();\n          if (data.transcription) {\n            setEntry(data.transcription);\n            setSaveMessage(\"Transcription received. Please review and save manually.\");\n          } else {\n            setSaveMessage(\"No transcription received.\");\n          }\n          setShowToast(true);\n        } catch (error) {\n          setSaveMessage(\"Error during transcription: \" + error.message);\n          setShowToast(true);\n        }\n      };\n\n      mediaRecorder.start();\n    } catch (err) {\n      setSaveMessage(\"Could not start recording: \" + err.message);\n      setShowToast(true);\n    }\n  };\n\n  const stopRecording = () => {\n    mediaRecorderRef.current?.state !== \"inactive\" && mediaRecorderRef.current.stop();\n    clearInterval(countdownIntervalRef.current);\n    setIsRecording(false);\n  };\n\n  const saveToGoogleSheet = async (date, time, text, username) => {\n    const SAVE_API_URL =\n      window.location.hostname === \"localhost\"\n        ? \"http://localhost:8090/saveEntry\"\n        : \"https://journal-whisper.onrender.com/saveEntry\";\n\n    try {\n      const response = await fetch(SAVE_API_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ date, time, entry: text, user: username }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to save entry to Google Sheets\");\n\n      return await response.json();\n    } catch (error) {\n      setSaveMessage(\"Error saving to Google Sheets: \" + error.message);\n      setShowToast(true);\n      return null;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSavePressed(true);\n    setTimeout(() => setIsSavePressed(false), 150);\n\n    if (!entry.trim()) {\n      setSaveMessage(\"Please enter something before saving.\");\n      setShowToast(true);\n      return;\n    }\n\n    const result = await saveToGoogleSheet(\n      currentTimestamp.date,\n      currentTimestamp.time,\n      entry,\n      user\n    );\n\n    if (result) {\n      setSaveMessage(\"Journal entry saved successfully!\");\n      setShowToast(true);\n      setEntry(\"\");\n      setCurrentTimestamp(generateTimestamp());\n\n      const savedDate = new Date(currentTimestamp.date + \"T00:00:00\");\n      setSelectedDate(savedDate);\n      fetchEntriesForDate(savedDate);\n\n      setLocalEntries((prev) => ({\n        ...prev,\n        [formatDateLocal(savedDate)]: entry,\n      }));\n    } else {\n      setSaveMessage(\"Failed to save entry. Please try again.\");\n      setShowToast(true);\n    }\n  };\n\n  const handleRefreshTime = () => {\n    setCurrentTimestamp(generateTimestamp());\n    setSaveMessage(\"\");\n  };\n\n  useEffect(() => {\n    return () => {\n      mediaRecorderRef.current?.state !== \"inactive\" &&\n        mediaRecorderRef.current.stop();\n      clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (saveMessage) {\n      const timer = setTimeout(() => setSaveMessage(\"\"), 6000);\n      return () => clearTimeout(timer);\n    }\n  }, [saveMessage]);\n\n  const getButtonProgress = () => {\n    if (recordingDuration === 0) return \"0%\";\n    const percent = ((recordingDuration - countdown) / recordingDuration) * 100;\n    return `${percent}%`;\n  };\n\n  return (\n    <div style={{\n      minHeight: \"100vh\",\n      backgroundColor: \"#FFF8E7\",\n      padding: \"2rem\",\n      fontFamily: \"sans-serif\",\n      maxWidth: 700,\n      margin: \"auto\",\n      color: \"#222\",\n    }}>\n      {showToast && saveMessage && (\n        <div style={{\n          position: \"fixed\",\n          top: \"40px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          backgroundColor: \"#333\",\n          color: \"white\",\n          padding: \"10px 20px\",\n          borderRadius: \"20px\",\n          boxShadow: \"0 2px 10px rgba(0,0,0,0.7)\",\n          zIndex: 9999,\n          fontSize: \"1rem\",\n          opacity: 0.9,\n          userSelect: \"none\",\n        }}>\n          {saveMessage}\n        </div>\n      )}\n\n      {/* ... rest of the layout ... */}\n\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Write your journal entry here...\"\n          value={entry}\n          onChange={(e) => setEntry(e.target.value)}\n          style={{\n            width: \"100%\",\n            height: \"150px\",\n            fontSize: \"1rem\",\n            padding: \"0.75rem\",\n            borderRadius: 8,\n            border: \"1px solid #ccc\",\n            resize: \"vertical\",\n            marginBottom: \"1rem\",\n            fontFamily: \"inherit\",\n          }}\n          disabled={isRecording}\n        />\n        <div style={{ textAlign: \"right\" }}>\n          <button\n            type=\"submit\"\n            disabled={isRecording}\n            style={{\n              padding: \"0.6rem 1.5rem\",\n              fontSize: \"1rem\",\n              backgroundColor: \"#27ae60\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"8px\",\n              cursor: isRecording ? \"not-allowed\" : \"pointer\",\n              userSelect: \"none\",\n              fontWeight: \"600\",\n              transform: isSavePressed ? \"translateY(2px)\" : \"none\",\n              boxShadow: isSavePressed\n                ? \"inset 0 2px 4px rgba(0,0,0,0.2)\"\n                : \"0 2px 5px rgba(0,0,0,0.2)\",\n              transition: \"transform 0.1s, box-shadow 0.1s\",\n            }}\n          >\n            Save Entry\n          </button>\n        </div>\n      </form>\n\n      {/* ... calendar, entries, etc ... */}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}