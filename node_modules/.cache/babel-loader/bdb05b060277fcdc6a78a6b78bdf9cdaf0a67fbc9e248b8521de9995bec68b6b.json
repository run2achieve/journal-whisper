{"ast":null,"code":"import _objectSpread from\"/Users/hye/Documents/journal-whisper/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from\"react\";import Calendar from\"react-calendar\";import'react-calendar/dist/Calendar.css';import logo from\"./assets/logo.png\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PROXY_API_URL=window.location.hostname===\"localhost\"?\"http://localhost:8090/transcribeAudio\":\"https://journal-whisper.onrender.com/transcribeAudio\";const formatDateLocal=date=>{const year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,\"0\");const day=String(date.getDate()).padStart(2,\"0\");return\"\".concat(year,\"-\").concat(month,\"-\").concat(day);};export default function Journal(_ref){let{user,onLogout}=_ref;const[entry,setEntry]=useState(\"\");const[isRecording,setIsRecording]=useState(false);const[showToast,setShowToast]=useState(false);const[saveMessage,setSaveMessage]=useState(\"\");const[currentTimestamp,setCurrentTimestamp]=useState({date:\"\",time:\"\"});const[countdown,setCountdown]=useState(0);const[recordingDuration,setRecordingDuration]=useState(0);const[selectedDate,setSelectedDate]=useState(new Date());const[entriesForDate,setEntriesForDate]=useState([]);const[entriesByDate,setEntriesByDate]=useState({});const mediaRecorderRef=useRef(null);const audioChunksRef=useRef([]);const countdownIntervalRef=useRef(null);const generateTimestamp=()=>{const now=new Date();return{date:formatDateLocal(now),time:now.toLocaleTimeString()};};useEffect(()=>{setCurrentTimestamp(generateTimestamp());},[]);const fetchEntriesForDate=async dateToFetch=>{const url=window.location.hostname===\"localhost\"?\"http://localhost:8090/getEntries\":\"https://journal-whisper.onrender.com/getEntries\";try{const response=await fetch(url,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({user,date:formatDateLocal(dateToFetch)})});const data=await response.json();setEntriesForDate(data.entries||[]);}catch(_unused){setEntriesForDate([]);}};const fetchAllEntriesByDate=async()=>{const url=window.location.hostname===\"localhost\"?\"http://localhost:8090/getAllEntriesByUser\":\"https://journal-whisper.onrender.com/getAllEntriesByUser\";try{const response=await fetch(url,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({user})});const data=await response.json();const byDate={};(data.entries||[]).forEach(_ref2=>{let{date}=_ref2;byDate[date]=true;});setEntriesByDate(byDate);}catch(_unused2){setEntriesByDate({});}};useEffect(()=>{fetchEntriesForDate(selectedDate);},[selectedDate,user]);useEffect(()=>{if(user)fetchAllEntriesByDate();},[user]);const startRecording=async durationSeconds=>{var _navigator$mediaDevic;if(!((_navigator$mediaDevic=navigator.mediaDevices)!==null&&_navigator$mediaDevic!==void 0&&_navigator$mediaDevic.getUserMedia)){setSaveMessage(\"Audio recording not supported in this browser.\");setShowToast(true);return;}try{const stream=await navigator.mediaDevices.getUserMedia({audio:true});const mediaRecorder=new MediaRecorder(stream);mediaRecorderRef.current=mediaRecorder;audioChunksRef.current=[];setRecordingDuration(durationSeconds);setCurrentTimestamp(generateTimestamp());setCountdown(durationSeconds);mediaRecorder.ondataavailable=event=>{if(event.data.size>0)audioChunksRef.current.push(event.data);};mediaRecorder.onstart=()=>{setIsRecording(true);setShowToast(true);setSaveMessage(\"Recording in progress...\");countdownIntervalRef.current=setInterval(()=>{setCountdown(prev=>{if(prev<=1){stopRecording();return 0;}return prev-1;});},1000);};mediaRecorder.onstop=async()=>{clearInterval(countdownIntervalRef.current);setCountdown(0);setIsRecording(false);setRecordingDuration(0);setSaveMessage(\"\");const audioBlob=new Blob(audioChunksRef.current,{type:\"audio/webm\"});try{const formData=new FormData();formData.append(\"file\",audioBlob,\"recording.webm\");formData.append(\"user\",user);const response=await fetch(PROXY_API_URL,{method:\"POST\",body:formData});const data=await response.json();if(data.transcription){setEntry(data.transcription);setSaveMessage(\"Transcription received. Please review and save manually.\");}else{setSaveMessage(\"No transcription received.\");}setShowToast(true);}catch(error){setSaveMessage(\"Error during transcription: \"+error.message);setShowToast(true);}};mediaRecorder.start();}catch(err){setSaveMessage(\"Could not start recording: \"+err.message);setShowToast(true);}};const stopRecording=()=>{var _mediaRecorderRef$cur;(_mediaRecorderRef$cur=mediaRecorderRef.current)===null||_mediaRecorderRef$cur===void 0?void 0:_mediaRecorderRef$cur.stop();clearInterval(countdownIntervalRef.current);setIsRecording(false);};const saveToGoogleSheet=async(date,time,text,username)=>{const url=window.location.hostname===\"localhost\"?\"http://localhost:8090/saveEntry\":\"https://journal-whisper.onrender.com/saveEntry\";try{const response=await fetch(url,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({date,time,entry:text,user:username})});return await response.json();}catch(error){setSaveMessage(\"Error saving to Google Sheets: \"+error.message);setShowToast(true);return null;}};const handleSubmit=async e=>{e.preventDefault();if(!entry.trim()){setSaveMessage(\"Please enter something before saving.\");setShowToast(true);return;}const result=await saveToGoogleSheet(currentTimestamp.date,currentTimestamp.time,entry,user);if(result){const newEntry={date:currentTimestamp.date,time:currentTimestamp.time,entry};// Optimistic UI update\nsetEntriesForDate(prev=>[newEntry,...prev]);setEntriesByDate(prev=>_objectSpread(_objectSpread({},prev),{},{[currentTimestamp.date]:true}));setSaveMessage(\"Journal entry saved successfully!\");setShowToast(true);setEntry(\"\");const newTimestamp=generateTimestamp();setCurrentTimestamp(newTimestamp);setSelectedDate(new Date(newEntry.date+\"T00:00:00\"));fetchEntriesForDate(new Date(newEntry.date+\"T00:00:00\"));fetchAllEntriesByDate();}else{setSaveMessage(\"Failed to save entry. Please try again.\");setShowToast(true);}};const handleRefreshTime=()=>{setCurrentTimestamp(generateTimestamp());setSaveMessage(\"\");};useEffect(()=>{return()=>{var _mediaRecorderRef$cur2;if(((_mediaRecorderRef$cur2=mediaRecorderRef.current)===null||_mediaRecorderRef$cur2===void 0?void 0:_mediaRecorderRef$cur2.state)!==\"inactive\"){mediaRecorderRef.current.stop();}clearInterval(countdownIntervalRef.current);};},[]);useEffect(()=>{if(saveMessage){const timer=setTimeout(()=>setSaveMessage(\"\"),6000);return()=>clearTimeout(timer);}},[saveMessage]);const getButtonProgress=()=>{if(recordingDuration===0)return\"0%\";const percent=(recordingDuration-countdown)/recordingDuration*100;return\"\".concat(percent,\"%\");};const tileClassName=_ref3=>{let{date,view}=_ref3;if(view===\"month\"){const dateStr=formatDateLocal(date);return entriesByDate[dateStr]?\"highlighted-date\":null;}return null;};return/*#__PURE__*/_jsxs(\"div\",{style:{minHeight:\"100vh\",backgroundColor:\"#FFF8E7\",padding:\"2rem\",fontFamily:\"sans-serif\",maxWidth:700,margin:\"auto\",color:\"#222\"},children:[showToast&&saveMessage&&/*#__PURE__*/_jsx(\"div\",{style:{position:\"fixed\",top:\"40px\",left:\"50%\",transform:\"translateX(-50%)\",backgroundColor:\"#333\",color:\"white\",padding:\"10px 20px\",borderRadius:\"20px\",boxShadow:\"0 2px 10px rgba(0,0,0,0.7)\",zIndex:9999},children:saveMessage}),/*#__PURE__*/_jsx(\"style\",{children:\"\\n        .highlighted-date {\\n          background-color: #ffeb3b !important;\\n          border-radius: 50% !important;\\n          color: black !important;\\n          font-weight: 600;\\n        }\\n        .highlighted-date:hover {\\n          background-color: #fbc02d !important;\\n          color: black !important;\\n        }\\n      \"})]});}","map":{"version":3,"names":["React","useState","useEffect","useRef","Calendar","logo","jsx","_jsx","jsxs","_jsxs","PROXY_API_URL","window","location","hostname","formatDateLocal","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","Journal","_ref","user","onLogout","entry","setEntry","isRecording","setIsRecording","showToast","setShowToast","saveMessage","setSaveMessage","currentTimestamp","setCurrentTimestamp","time","countdown","setCountdown","recordingDuration","setRecordingDuration","selectedDate","setSelectedDate","Date","entriesForDate","setEntriesForDate","entriesByDate","setEntriesByDate","mediaRecorderRef","audioChunksRef","countdownIntervalRef","generateTimestamp","now","toLocaleTimeString","fetchEntriesForDate","dateToFetch","url","response","fetch","method","headers","body","JSON","stringify","data","json","entries","_unused","fetchAllEntriesByDate","byDate","forEach","_ref2","_unused2","startRecording","durationSeconds","_navigator$mediaDevic","navigator","mediaDevices","getUserMedia","stream","audio","mediaRecorder","MediaRecorder","current","ondataavailable","event","size","push","onstart","setInterval","prev","stopRecording","onstop","clearInterval","audioBlob","Blob","type","formData","FormData","append","transcription","error","message","start","err","_mediaRecorderRef$cur","stop","saveToGoogleSheet","text","username","handleSubmit","e","preventDefault","trim","result","newEntry","_objectSpread","newTimestamp","handleRefreshTime","_mediaRecorderRef$cur2","state","timer","setTimeout","clearTimeout","getButtonProgress","percent","tileClassName","_ref3","view","dateStr","style","minHeight","backgroundColor","padding","fontFamily","maxWidth","margin","color","children","position","top","left","transform","borderRadius","boxShadow","zIndex"],"sources":["/Users/hye/Documents/journal-whisper/src/Journal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Calendar from \"react-calendar\";\nimport 'react-calendar/dist/Calendar.css';\nimport logo from \"./assets/logo.png\";\n\nconst PROXY_API_URL =\n  window.location.hostname === \"localhost\"\n    ? \"http://localhost:8090/transcribeAudio\"\n    : \"https://journal-whisper.onrender.com/transcribeAudio\";\n\nconst formatDateLocal = (date) => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n};\n\nexport default function Journal({ user, onLogout }) {\n  const [entry, setEntry] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [saveMessage, setSaveMessage] = useState(\"\");\n  const [currentTimestamp, setCurrentTimestamp] = useState({ date: \"\", time: \"\" });\n  const [countdown, setCountdown] = useState(0);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [entriesForDate, setEntriesForDate] = useState([]);\n  const [entriesByDate, setEntriesByDate] = useState({});\n\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownIntervalRef = useRef(null);\n\n  const generateTimestamp = () => {\n    const now = new Date();\n    return {\n      date: formatDateLocal(now),\n      time: now.toLocaleTimeString(),\n    };\n  };\n\n  useEffect(() => {\n    setCurrentTimestamp(generateTimestamp());\n  }, []);\n\n  const fetchEntriesForDate = async (dateToFetch) => {\n    const url = window.location.hostname === \"localhost\"\n      ? \"http://localhost:8090/getEntries\"\n      : \"https://journal-whisper.onrender.com/getEntries\";\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          user,\n          date: formatDateLocal(dateToFetch),\n        }),\n      });\n      const data = await response.json();\n      setEntriesForDate(data.entries || []);\n    } catch {\n      setEntriesForDate([]);\n    }\n  };\n\n  const fetchAllEntriesByDate = async () => {\n    const url = window.location.hostname === \"localhost\"\n      ? \"http://localhost:8090/getAllEntriesByUser\"\n      : \"https://journal-whisper.onrender.com/getAllEntriesByUser\";\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ user }),\n      });\n      const data = await response.json();\n      const byDate = {};\n      (data.entries || []).forEach(({ date }) => {\n        byDate[date] = true;\n      });\n      setEntriesByDate(byDate);\n    } catch {\n      setEntriesByDate({});\n    }\n  };\n\n  useEffect(() => {\n    fetchEntriesForDate(selectedDate);\n  }, [selectedDate, user]);\n\n  useEffect(() => {\n    if (user) fetchAllEntriesByDate();\n  }, [user]);\n\n  const startRecording = async (durationSeconds) => {\n    if (!navigator.mediaDevices?.getUserMedia) {\n      setSaveMessage(\"Audio recording not supported in this browser.\");\n      setShowToast(true);\n      return;\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      setRecordingDuration(durationSeconds);\n      setCurrentTimestamp(generateTimestamp());\n      setCountdown(durationSeconds);\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) audioChunksRef.current.push(event.data);\n      };\n\n      mediaRecorder.onstart = () => {\n        setIsRecording(true);\n        setShowToast(true);\n        setSaveMessage(\"Recording in progress...\");\n        countdownIntervalRef.current = setInterval(() => {\n          setCountdown((prev) => {\n            if (prev <= 1) {\n              stopRecording();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n      };\n\n      mediaRecorder.onstop = async () => {\n        clearInterval(countdownIntervalRef.current);\n        setCountdown(0);\n        setIsRecording(false);\n        setRecordingDuration(0);\n        setSaveMessage(\"\");\n\n        const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/webm\" });\n\n        try {\n          const formData = new FormData();\n          formData.append(\"file\", audioBlob, \"recording.webm\");\n          formData.append(\"user\", user);\n\n          const response = await fetch(PROXY_API_URL, {\n            method: \"POST\",\n            body: formData,\n          });\n\n          const data = await response.json();\n          if (data.transcription) {\n            setEntry(data.transcription);\n            setSaveMessage(\"Transcription received. Please review and save manually.\");\n          } else {\n            setSaveMessage(\"No transcription received.\");\n          }\n          setShowToast(true);\n        } catch (error) {\n          setSaveMessage(\"Error during transcription: \" + error.message);\n          setShowToast(true);\n        }\n      };\n\n      mediaRecorder.start();\n    } catch (err) {\n      setSaveMessage(\"Could not start recording: \" + err.message);\n      setShowToast(true);\n    }\n  };\n\n  const stopRecording = () => {\n    mediaRecorderRef.current?.stop();\n    clearInterval(countdownIntervalRef.current);\n    setIsRecording(false);\n  };\n\n  const saveToGoogleSheet = async (date, time, text, username) => {\n    const url = window.location.hostname === \"localhost\"\n      ? \"http://localhost:8090/saveEntry\"\n      : \"https://journal-whisper.onrender.com/saveEntry\";\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ date, time, entry: text, user: username }),\n      });\n      return await response.json();\n    } catch (error) {\n      setSaveMessage(\"Error saving to Google Sheets: \" + error.message);\n      setShowToast(true);\n      return null;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!entry.trim()) {\n      setSaveMessage(\"Please enter something before saving.\");\n      setShowToast(true);\n      return;\n    }\n\n    const result = await saveToGoogleSheet(\n      currentTimestamp.date,\n      currentTimestamp.time,\n      entry,\n      user\n    );\n\n    if (result) {\n      const newEntry = {\n        date: currentTimestamp.date,\n        time: currentTimestamp.time,\n        entry,\n      };\n\n      // Optimistic UI update\n      setEntriesForDate((prev) => [newEntry, ...prev]);\n      setEntriesByDate((prev) => ({\n        ...prev,\n        [currentTimestamp.date]: true,\n      }));\n\n      setSaveMessage(\"Journal entry saved successfully!\");\n      setShowToast(true);\n      setEntry(\"\");\n      const newTimestamp = generateTimestamp();\n      setCurrentTimestamp(newTimestamp);\n      setSelectedDate(new Date(newEntry.date + \"T00:00:00\"));\n\n      fetchEntriesForDate(new Date(newEntry.date + \"T00:00:00\"));\n      fetchAllEntriesByDate();\n    } else {\n      setSaveMessage(\"Failed to save entry. Please try again.\");\n      setShowToast(true);\n    }\n  };\n\n  const handleRefreshTime = () => {\n    setCurrentTimestamp(generateTimestamp());\n    setSaveMessage(\"\");\n  };\n\n  useEffect(() => {\n    return () => {\n      if (mediaRecorderRef.current?.state !== \"inactive\") {\n        mediaRecorderRef.current.stop();\n      }\n      clearInterval(countdownIntervalRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (saveMessage) {\n      const timer = setTimeout(() => setSaveMessage(\"\"), 6000);\n      return () => clearTimeout(timer);\n    }\n  }, [saveMessage]);\n\n  const getButtonProgress = () => {\n    if (recordingDuration === 0) return \"0%\";\n    const percent = ((recordingDuration - countdown) / recordingDuration) * 100;\n    return `${percent}%`;\n  };\n\n  const tileClassName = ({ date, view }) => {\n    if (view === \"month\") {\n      const dateStr = formatDateLocal(date);\n      return entriesByDate[dateStr] ? \"highlighted-date\" : null;\n    }\n    return null;\n  };\n\n  return (\n    <div style={{ minHeight: \"100vh\", backgroundColor: \"#FFF8E7\", padding: \"2rem\", fontFamily: \"sans-serif\", maxWidth: 700, margin: \"auto\", color: \"#222\" }}>\n      {showToast && saveMessage && (\n        <div style={{ position: \"fixed\", top: \"40px\", left: \"50%\", transform: \"translateX(-50%)\", backgroundColor: \"#333\", color: \"white\", padding: \"10px 20px\", borderRadius: \"20px\", boxShadow: \"0 2px 10px rgba(0,0,0,0.7)\", zIndex: 9999 }}>\n          {saveMessage}\n        </div>\n      )}\n\n      {/* UI continues: logo, controls, calendar, entries... */}\n      {/* Full JSX as in your version, unchanged, aside from updated handleSubmit */}\n\n      {/* Additional styles */}\n      <style>{`\n        .highlighted-date {\n          background-color: #ffeb3b !important;\n          border-radius: 50% !important;\n          color: black !important;\n          font-weight: 600;\n        }\n        .highlighted-date:hover {\n          background-color: #fbc02d !important;\n          color: black !important;\n        }\n      `}</style>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}